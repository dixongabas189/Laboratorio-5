`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05.05.2019 18:11:51
// Design Name: 
// Module Name: Top_design2
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Top_design2(
         input logic clk,
input logic btnL,//Se esta agregando este (StateMachine5)
input logic [1:0]sw,
output logic hsync,
output logic vsync,
output logic [3:0] VGA_R,//4-bit VGA red output
output logic [3:0] VGA_G,//4-bit VGA red output
output logic [3:0] VGA_B //4-bit VGA red output
    );
        wire clkdivider;
    wire clkdivider2;
    wire button1;
    wire video_on;
    logic [9:0] x;  // current pixel x position: 10-bit value: 0-1023
    logic [9:0] y;  // current pixel y position:  9-bit value: 0-511
    //Registros
    reg [11:0] rgb_reg;
    wire [11:0] rgb_next;
    Divisor2 Divisor(.clk_in(clk),.en(1'b1),.reset(button1),.clk_out(clkdivider));
    Divisor50 Divisor2(.clk_in(clk),.en(1'b1),.reset(button1),.clk_out(clkdivider2));
    Antirebote antiL(.clk(clk),.btn_in(btnL),.btn_out(button1));
    vga_sync(.clk(clkdivider),.reset(button1),.hsync(hsync),.vsync(vsync),.video_on(video_on),.pixel_x(x),.pixel_y(y));
    //
    localparam SCREEN_WIDTH = 640;
    localparam SCREEN_HEIGHT = 480;
        // sprite buffer (Solo lectura)
    localparam SPRITE_SIZE = 32;  // dimensiones del sprite cuadrado en pixeles
    //localparam SPRITE_COUNT = 8;  // number of sprites in buffer
    localparam SPRITEBUF_D_WIDTH = 8;  // colour bits per pixel
    localparam SPRITEBUF_DEPTH = SPRITE_SIZE * SPRITE_SIZE;//32*32    
    localparam SPRITEBUF_A_WIDTH = 10;  // 2^10 == 1024 == 32 x 32 

    reg [SPRITEBUF_A_WIDTH-1:0] address_s;
    wire [SPRITEBUF_D_WIDTH-1:0] dataout_s;

    // sprite buffer memory
    sram #(
        .ADDR_WIDTH(SPRITEBUF_A_WIDTH), 
        .DATA_WIDTH(SPRITEBUF_D_WIDTH), 
        .DEPTH(SPRITEBUF_DEPTH), 
        .MEMFILE("New_Piskel.mem"))
        spritebuf (
        .i_addr(address_s), 
        .i_clk(clk), 
        .i_write(0),  // read only
        .i_data(0), 
        .o_data(dataout_s)
    );
        reg [11:0] palette [0:255];  // 256 x 12-bit colour palette entries
        reg [11:0] colour;
        initial begin
            $display("Loading palette.");
            $readmemh("New_Piskel_palette.mem", palette);
        end
            // sprites to load and position of player sprite in frame
        localparam SPRITE_BG_INDEX = 7;  // background sprite
        localparam SPRITE_PL_INDEX = 0;  // player sprite
        localparam SPRITE_BG_OFFSET = SPRITE_BG_INDEX * SPRITE_SIZE * SPRITE_SIZE;
        localparam SPRITE_PL_OFFSET = SPRITE_PL_INDEX * SPRITE_SIZE * SPRITE_SIZE;
        localparam SPRITE_PL_X = SCREEN_WIDTH - SPRITE_SIZE >> 1; // centre
        localparam SPRITE_PL_Y = SCREEN_HEIGHT - SPRITE_SIZE;     // bottom
endmodule
