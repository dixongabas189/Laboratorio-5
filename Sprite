`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 06.05.2019 12:35:02
// Design Name: 
// Module Name: sprite
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module sprite(
    input logic clk,
    input logic [9:0] hc,   // posicion X de pantalla
    input logic [9:0] vc,   // posicion Y de pantalla
    input logic [9:0] posx, // posicion X inicial del sprite
    input logic [9:0] posy, // posicion Y inicial del sprite
    input logic [11:0] rgbin,   // color de pantalla
    output logic [11:0] rgbout  // color de pantalla
    );
      localparam
      TRANSPARENTE = 12'h0F0,  // en nuestro sprite el verde es transparente"
      TAM          = 10'd16;      // tamano en pixeles tanto horizontal como vertical, del sprite
  
    reg [11:0] spr[0:255];   // memoria que guarda el sprite (16x16 posiciones de 12 bits cada posicion)
    initial begin
      $readmemh ("datos_sprite.mem", spr);  // inicializamos esa memoria desde un fichero con datos hexadecimales
    end
    
    wire [3:0] spr_x = hc - posx; // posicion X dentro de la matriz del sprite, en funcion de la posicion X actual de pantalla y posicion inicial X del sprite
    wire [3:0] spr_y = vc - posy; // posicion Y dentro de la matriz del sprite, en funcion de la posicion Y actual de pantalla y posicion inicial Y del sprite
    
    reg [11:0] color;  // color del pixel actual del sprite
     assign color = spr[{spr_y,spr_x}];  // leemos el color del pixel y lo guardamos (la posicion del pixel podria ser completamente erronea aqui)
    always @(posedge clk) begin
//    if(reset)begin
//    end
//      color <= spr[{spr_y,spr_x}];  // leemos el color del pixel y lo guardamos (la posicion del pixel podria ser completamente erronea aqui)
      if (hc >= posx && hc < (posx + TAM) && vc >= posy && vc < (posy + TAM) && color != TRANSPARENTE) begin  // si la posicion actual de pantalla esta dentro de los margenes del sprite, y el color leido del sprite no es el transparente....
        rgbout <= color;    // que hemos leido
      end
      else begin
      rgbout <= rgbin;
      end  
    end 
endmodule
