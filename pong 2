

module pong_graph_st(
    input logic video_on,
    input logic [9:0] pix_x, pix_y,
    output logic [11:0] graph_rgb 
    );
    // constant and signal declaration
    // x, y coordinates (0.0) to (639,479)
    parameter MAX_X = 640;
    parameter MAX_Y = 480;
    // vertical stripe as a wall
    //
    // wall left , right boundary
    parameter WALL_X_L = 32;
    parameter WALL_X_R = 35;
    //
    // right vertical bar
    //
    // bar left , right boundary
    parameter BAR_X_L = 600; 
    parameter BAR_X_R = 603;
    // bar top, bottom boundary
    localparam BAR_Y_SIZE = 72;
    parameter BAR_Y_T = MAX_Y/2-BAR_Y_SIZE/2; //204
    parameter BAR_Y_B = BAR_Y_T+BAR_Y_SIZE -1 ;
    // square ball
    //
    parameter BALL_SIZE = 8;
    // ball left , right boundary
    parameter BALL_X_L = 580;
    parameter BALL_X_R = BALL_X_L+BALL_SIZE-1;
    // ball top, bottom boundary
    parameter BALL_Y_T = 238;
    parameter BALL_Y_B = BALL_Y_T+BALL_SIZE -1 ;
    // object output signals
    wire wall_on , bar_on , sq_ball_on ;
    wire [11:0] wall_rgb , bar_rgb , ball_rgb ;
    // body
    // (wall) left vertical strip
    // pixel within wall
    assign wall_on = (WALL_X_L<=pix_x) && (pix_x<=WALL_X_R);
    // wall rgb output
    assign wall_rgb = 12'b000000001111; // blue
    // right vertical bar
    // pixel within bar
    assign bar_on = (BAR_X_L<=pix_x) && (pix_x<=BAR_X_R) &&(BAR_Y_T<=pix_y) && (pix_y<=BAR_Y_B);
    // bar rgb output
    assign bar_rgb = 12'b000011110000; // green
    //
    // square ball
    // pixel within squared ball
    assign sq_ball_on =(BALL_X_L <=pix_x) && (pix_x <=BALL_X_R) &&
    (BALL_Y_T <=pix_y) && (pix_y <=BALL_Y_B);
    assign ball_rgb = 12'b111100000000; // red
    // rgb multiplexing circuit
    always @*
    if (~video_on)
    graph_rgb = 12'b000000000000; // blank
    else
    if (wall_on) 
    graph_rgb = wall_rgb ;
    else if (bar_on)
    graph_rgb = bar_rgb ;
    else if (sq_ball_on)
    graph_rgb = ball_rgb;
    else
    graph_rgb = 12'b111111110000; // yellow background 
endmodule
